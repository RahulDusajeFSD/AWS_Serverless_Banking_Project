AWSTemplateFormatVersion: "2010-09-09"
Description: This is a serverless Banking application for two users A & B. The project involves interaction with AWS Cognito, DynamoDB, Lambda, S3, SES.

Resources: 
    BankingDetails:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: BankingProject
            AttributeDefinitions:      # This is just for defining the primary key and sort key and for GSIs, LSIs
                - AttributeName: "email"
                  AttributeType: "S"   #String
            KeySchema:
                - AttributeName: "email"
                  KeyType: "HASH"  # Partition Key

        
            BillingMode: PAY_PER_REQUEST  # On-Demand


#Cognito User Pool - serves as a directory to save user email

    BankingUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: BankingUserPool
            UsernameAttributes:
              - email
            AutoVerifiedAttributes:  #Automatically verify email with a code
              - email 
            Schema:
              - Name: email
                AttributeDataType: String
                Mutable: false
                Required: true
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            LambdaConfig:
                PostConfirmation: !GetAtt PostConfirmationLambda.Arn  # Moved here from CognitoTrigger


 # Cognito User Pool Client - to interact with user pool

    BankingUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: BankingAppClient
            UserPoolId: !Ref BankingUserPool
            GenerateSecret: false  # No secret for client-side apps
            ExplicitAuthFlows:
            - ALLOW_USER_PASSWORD_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH

#Grants permissions to PostLambdaConfirmation fn.
    PostConfirmationLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref PostConfirmationLambda
            Action: lambda:InvokeFunction
            Principal: cognito-idp.amazonaws.com
            SourceArn: !GetAtt BankingUserPool.Arn

    LambdaExecutionRole:  
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com  #Since lambda is goind to access DynamoDB
                      Action:
                        - 'sts:AssumeRole'  #To Temporarily access dynamoDB
            Description: IAM Role for Lambda to Access DynamoDB
            ManagedPolicyArns: 
            - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess # from IAM Policies of AmazonDynamoDBFullAccess



#Lambda Function to add a new user post authentication

    PostConfirmationLambda:
        Type: AWS::Lambda::Function
        DependsOn: LambdaExecutionRole
        Properties:
            Runtime: python3.11
            Role: !GetAtt LambdaExecutionRole.Arn
            Handler: index.post_confirmation
            Code:
                ZipFile: |
                    import json
                    import boto3
                    dynamodb = boto3.resource('dynamodb')
                    table = dynamodb.Table('BankingProject')

                    def post_confirmation(event, context):
                        email = event['request']['userAttributes']['email']
                        table.put_item(
                            Item={
                                'email': email,
                                'balance': 0  # Initial balance once the user sign-up successfully. 
                            }
                        )
                        return event
            Timeout: 60



    LambdaFunctionAddAmount:  #To Add Amount to User Balance
        Description: Lambda with DynamoDB
        DependsOn: LambdaExecutionRole
        Type: AWS::Lambda::Function
        Properties:
            Runtime: python3.11
            Role: !GetAtt LambdaExecutionRole.Arn
            Handler: index.add_amount  # lambda filename + function name
            Code: 
                ZipFile: |
                    import json
                    import boto3
                    dynamodb = boto3.resource('dynamodb')
                    table = dynamodb.Table('BankingProject')

                    def check_balance(email):                   #To check current user balance
                        response = table.get_item(
                            Key = {'email': email}
                        )

                        if 'Item' in response:
                            return response['Item'].get('balance',0)
                        else:
                            return None

                    def add_amount(event, context):
                        email = event['email']          # Retrieve email from event
                        amount = event['amount']      #changed balance to amount
                        response = table.update_item(
                            Key = {'email': email},
                            UpdateExpression="SET balance = balance + :amount",  #changed balance to amount
                            ExpressionAttributeValues={':amount': amount},      #changed balance to amount
                            ReturnValues="UPDATED_NEW"
                        )
                        return {
                        'statusCode': 201,
                        'body': {
                            'email': email,
                            'message': "Successfully deposited " + str(amount) + " to " + email,
                            'current_balance': str(check_balance(email))
                        }
                        }


                            

                
             
            Timeout: 60

        




    LambdaFunctionTransferAmount:  #To Transfer amount from Account A -> B
        Description: To transfer amount from Account A -> B
        DependsOn: LambdaExecutionRole
        Type: AWS::Lambda::Function
        Properties:
            Runtime: python3.11
            Role: !GetAtt LambdaExecutionRole.Arn
            Handler: index.transfer_amount  # lambda filename + function name
            Code: 
                ZipFile: |
                        import json
                        import boto3
                        dynamodb = boto3.resource('dynamodb')
                        table = dynamodb.Table('BankingProject')

                        def checkBalance(email):
                            response = table.get_item(
                                Key={'email': email}
                                
                            )

                            if 'Item' in response:
                                return response['Item'].get('balance', 0)
                            else:
                                return None  


                        def withdraw(email, amount):
                            table.update_item(
                                Key= {'email': email},
                                UpdateExpression="SET balance = balance - :amount",
                                ExpressionAttributeValues={':amount': amount}

                            )

                        def deposit(email, amount):
                            table.update_item(
                                Key= {'email': email},
                                UpdateExpression="SET balance = balance + :amount",
                                ExpressionAttributeValues={':amount': amount}

                            )


                        def transfer_amount(event, context):

                            transfer_from = event['transfer_from']
                            transfer_to = event['transfer_to']
                            amount = event['amount']

                            if(checkBalance(transfer_from) > amount):
                                withdraw(transfer_from, amount)
                                deposit(transfer_to, amount)

                                return {
                                    'sender_current_balance': checkBalance(transfer_from),
                                    'statusCode': 201,
                                    'message': 'Amount deducted from ' + transfer_from + ' and deposited to ' + transfer_to
                                }
                            else:
                                return {
                                    'statusCode': 201,
                                    'message': "Insufficient balance of the sender",
                                    'sender_current_balance': checkBalance(transfer_from),
                                    
                                }


             
            Timeout: 60


    LambdaFunctionWithdrawAmount:
        Description: This function deals with withdrawing the amount from an account
        DependsOn: LambdaExecutionRole
        Type: AWS::Lambda::Function
        Properties:
            Runtime: python3.11
            Role: !GetAtt LambdaExecutionRole.Arn
            Handler: index.withdraw_amount
            Code:
                ZipFile: |
                    import json
                    import boto3
                    dynamodb = boto3.resource('dynamodb')
                    table = dynamodb.Table('BankingProject')

                    def check_balance(email):                   #To check current user balance
                        response = table.get_item(
                            Key = {'email': email}
                        )

                        if 'Item' in response:
                            return response['Item'].get('balance',0)
                        else:
                            return None

                    def withdraw_amount(event, context):
                        email = event['email']          # Retrieve email from event
                        amount = event['amount']       #changed balance to amount

                        if(check_balance(email) > amount):

                            response = table.update_item(
                                Key = {'email': email},
                                UpdateExpression="SET balance = balance - :amount",
                                ExpressionAttributeValues={':amount': amount},
                                ReturnValues="UPDATED_NEW"
                            )
                            return {
                            'statusCode': 201,
                                'body': {
                                'email': email,
                                'message': "Successfully withdrew " + str(amount) + " from " + email,
                                'current_balance': str(check_balance(email))
                            }
                            }
                        else:
                            return {
                            'statusCode': 201,
                                'body': {
                                'email': email,
                                'message': "Current balance less than amount requested to be withdrawn",
                                'current_balance': str(check_balance(email))
                            }
                            }

            Timeout: 60


    LambdaFunctionCheckBalance:
        Description: This function deals with checking current balance associated with an account
        DependsOn: LambdaExecutionRole
        Type: AWS::Lambda::Function
        Properties:
            Runtime: python3.11
            Role: !GetAtt LambdaExecutionRole.Arn
            Handler: index.check_balance
            Code:
                ZipFile: |
                    import json
                    import boto3
                    dynamodb = boto3.resource('dynamodb')
                    table = dynamodb.Table('BankingProject')

                    def check_balance(event, context):
                        email = event['pathParameters']['email']          # Retrieve email from pathParameters event -- through slug /balance/{email} in API Gateway
                        response = table.get_item(
                            Key = {'email': email}

                        )

                        if 'Item' in response:
                            return {
                                'statusCode': 200,
                                'Balance': email + " has balance of $" + str(response['Item'].get('balance', 0))
                                }
                        else:
                            return None

            Timeout: 60



#API GATEWAY

    BankingProjectRESTAPI:  #Creating REST API
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: bankingprojectapi  #API Gateway Name


#CREATING PARENT RESOURCE    - /account
    accountsResource:  # Creating Resource
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !GetAtt BankingProjectRESTAPI.RootResourceId  # Since the parent of this resource is / , we are referring to it. I cases where /resource1/resource2, while defining the parent id of resource2, it will be the (!Ref resource1)
            PathPart: account  # /account
            RestApiId: !Ref BankingProjectRESTAPI #Id of API gateway


#CREATING SUB RESOURCES    - /account/deposit

    depositResource:  # Creating Resource
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !Ref accountsResource  # attach to /account   # Also, if using !GetAtt use <LogicalId>.<Attribute> use !Ref for <LogicalId>
            PathPart: deposit  # /deposit
            RestApiId: !Ref BankingProjectRESTAPI #Id of API gateway

    
    depositMethod:  #Creating Method for the resource
        Type: 'AWS::ApiGateway::Method'
        Properties:
            RestApiId: !Ref BankingProjectRESTAPI
            ResourceId: !Ref depositResource
            HttpMethod: POST
            MethodResponses:
                - StatusCode: 201
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationResponses:
                    - StatusCode: 201   #Remember, this has to match with the statucode coming from Lambda Fn.
                      ResponseTemplates: 
                        "application/json": ""  # Passes the response as-is from lambda fn to API Gateway

                IntegrationHttpMethod: POST #As API Gateway sends the event and context object to Lambda; therefore, POST call.
                Uri: !Sub 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/${LambdaFunctionAddAmount.Arn}/invocations'
                RequestTemplates:
                    "application/json": "$input.json('$')"



    LambdaInvokePermissionForDeposit:  #To enable Lambda function invokation upon API Gateway Request
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaFunctionAddAmount
            Action: lambda:InvokeFunction #On What function of Principal (API Gateway here) will Lambda function be invoked
            Principal: 'apigateway.amazonaws.com' #API Gateway
            SourceAccount: 715841332016


#---------------------------------------------------------------------------#


#WITHDRAW METHOD API GATEWAY DECLARATION-->

    withdrawResource:  # Creating Resource
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !Ref accountsResource  # attach to /account   # Also, if using !GetAtt use <LogicalId>.<Attribute> use !Ref for <LogicalId>
            PathPart: withdraw  # /withdraw
            RestApiId: !Ref BankingProjectRESTAPI #Id of API gateway

    
    withdrawMethod:  #Creating Method for the resource
        Type: 'AWS::ApiGateway::Method'
        Properties:
            RestApiId: !Ref BankingProjectRESTAPI
            ResourceId: !Ref withdrawResource
            HttpMethod: POST
            MethodResponses:
                - StatusCode: 201
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationResponses:
                    - StatusCode: 201   #Remember, this has to match with the statucode coming from Lambda Fn.
                      ResponseTemplates: 
                        "application/json": ""  # Passes the response as-is from lambda fn to API Gateway

                IntegrationHttpMethod: POST #As API Gateway sends the event and context object to Lambda; therefore, POST call.
                Uri: !Sub 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/${LambdaFunctionWithdrawAmount.Arn}/invocations'
                RequestTemplates:
                    "application/json": "$input.json('$')"


    LambdaInvokePermissionForWithdraw:  #To enable Lambda function invokation upon API Gateway Request
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaFunctionWithdrawAmount
            Action: lambda:InvokeFunction #On What function of Principal (API Gateway here) will Lambda function be invoked
            Principal: 'apigateway.amazonaws.com' #API Gateway
            SourceAccount: 715841332016


#---------------------------------------------------------------------------#


#TRANSFER METHOD API GATEWAY DECLARATION-->

    transferResource:  # Creating Resource
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !Ref accountsResource  # attach to /account   # Also, if using !GetAtt use <LogicalId>.<Attribute> use !Ref for <LogicalId>
            PathPart: transfer  # /transfer
            RestApiId: !Ref BankingProjectRESTAPI #Id of API gateway

    
    transferMethod:  #Creating Method for the resource
        Type: 'AWS::ApiGateway::Method'
        Properties:
            RestApiId: !Ref BankingProjectRESTAPI
            ResourceId: !Ref transferResource
            HttpMethod: POST
            MethodResponses:
                - StatusCode: 201
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationResponses:
                    - StatusCode: 201   #Remember, this has to match with the statucode coming from Lambda Fn.
                      ResponseTemplates: 
                        "application/json": ""  # Passes the response as-is from lambda fn to API Gateway

                IntegrationHttpMethod: POST #As API Gateway sends the event and context object to Lambda; therefore, POST call.
                Uri: !Sub 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/${LambdaFunctionTransferAmount.Arn}/invocations'
                RequestTemplates:
                    "application/json": "$input.json('$')"


    LambdaInvokePermissionForTransfer:  #To enable Lambda function invokation upon API Gateway Request
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaFunctionTransferAmount
            Action: lambda:InvokeFunction #On What function of Principal (API Gateway here) will Lambda function be invoked
            Principal: 'apigateway.amazonaws.com' #API Gateway
            SourceAccount: 715841332016

#---------------------------------------------------------------------------#

#CHECK BALANCE METHOD API GATEWAY DECLARATION-->

    balanceParentResource:  # Creating Resource
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !Ref accountsResource  # attach to /account   # Also, if using !GetAtt use <LogicalId>.<Attribute> use !Ref for <LogicalId>
            PathPart: balance # /account
            RestApiId: !Ref BankingProjectRESTAPI #Id of API gateway

    balanceResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: !Ref balanceParentResource
            PathPart: "{email}"
            RestApiId: !Ref BankingProjectRESTAPI

    
    balanceMethod:  #Creating Method for the resource
        Type: 'AWS::ApiGateway::Method'
        Properties:
            RestApiId: !Ref BankingProjectRESTAPI
            ResourceId: !Ref balanceResource
            HttpMethod: GET
            MethodResponses:
                - StatusCode: 200
            AuthorizationType: NONE
            Integration:
                Type: AWS
                IntegrationHttpMethod: POST #As API Gateway sends the event and context object to Lambda; therefore, POST call.
                RequestTemplates:
                    application/json: |
                        {
                            "pathParameters": {
                            "email": "$input.params('email')"
                            }
                        }
                IntegrationResponses:
                    - StatusCode: 200   #Remember, this has to match with the statucode coming from Lambda Fn.
                      ResponseTemplates:
                        application/json: |    #IMP. the #set is a VTL language for API GAteway to extract the value of BAlance from LAmbda fn output and map it to balance and returning it
                            #set($balance = $input.path('$.Balance'))  
                            {"message": "$balance"}

                Uri: !Sub 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/${LambdaFunctionCheckBalance.Arn}/invocations'
    
    LambdaInvokePermissionForBalanceCheck:  #To enable Lambda function invokation upon API Gateway Request
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref LambdaFunctionCheckBalance
            Action: lambda:InvokeFunction #On What function of Principal (API Gateway here) will Lambda function be invoked
            Principal: 'apigateway.amazonaws.com' #API Gateway
            SourceAccount: 715841332016


#---------------------------------------------------------------------------#


#Deployment to DEV Env
    APIDeployment: # This is required to make the REST API Publicly accessible.
        DependsOn: 
            - depositMethod
            - balanceMethod         # on Method, Deployment shoud not happen until the mthod is deployed.
            - transferMethod
            - withdrawMethod
        Type: 'AWS::ApiGateway::Deployment'
        Properties:
            RestApiId: !Ref BankingProjectRESTAPI
            Description: Dev Deployment 
            StageName: dev


Outputs:     #To Interact with API Testing Tool
 #UserPoolId:
   # Value: !Ref BankingUserPool      #Gets user pool id from AWS Cognito User Pool Required for signup and confirm signup API Call.

  ClientId:
    Value: !Ref BankingUserPoolClient

  #APIEndpoint:
    #Value: !Sub https://${BankingProjectRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/Dev

  CheckBalanceAPIEndpoint:
    Value: !Sub https://${BankingProjectRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/account/balance

  TransferFundsAPIEndpoint:
    Value: !Sub https://${BankingProjectRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/account/transfer
 
  DepositFundsAPIEndpoint:
    Value: !Sub https://${BankingProjectRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/account/deposit

  WithdrawFundsAPIEndpoint:
    Value: !Sub https://${BankingProjectRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/account/withdraw

  CognitoUserSignupAPIEndpoint:
    Value: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com
    Description: "Use Same URL for Confirming user -- This creates a record in DynamoDB of newly signed up user."